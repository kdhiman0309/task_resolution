<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_resolution_prb_resolution</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_snc_resolution_prb_resolution">defectISNOTEMPTY^EQ<item endquery="false" field="defect" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Populate defect details</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    // Add your code here
    try {
        var r = new sn_ws.RESTMessageV2('x_snc_resolution.BT1 Defect', 'Defect by Number');
        r.setStringParameterNoEscape('number', current.defect);

        var response = r.execute();
        var responseBody = response.getBody();
		
		var transformerDefinition = getTransformerDefinition();
		var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);
		if (transformer.transform()) {
			var row = transformer.getRow();
			current.problem = row["u_hi_number"];
			current.assigned_to = row["assigned_to"];
			current.incident_count = row["task_count"];
			current.security_prb = row["short_description"].indexOf("[Security Bug]") == -1 ? "0" : "1";
		}
		current.update();
		
        var httpStatus = response.getStatusCode();
		
    } catch (ex) {
        var message = ex.message;
    }
	
	function getTransformerDefinition() {
		// create a rule list to map a field to its element path
		var ruleList = new sn_tfrm.TransformerRuleList()
			.fromJSON() // the response body is a JSON
			// 'active' field maps to path '$.active'
			.addRule("active", "$.active")
			.addRule("caller_id", "$.caller_id.value")
			.addRule("number", "$.number")
			.addRule("short_description", "$.short_description")
			.addRule("sys_id", "$.sys_id")
			.addRule("updates", "$.sys_mod_count");
		var recordPath = "$.result";
		return new sn_tfrm.TransformerDefinition(ruleList, recordPath);
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>kulshreshth.dhiman@snc</sys_created_by>
        <sys_created_on>2020-01-09 00:05:09</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>214de4e8db9e0450df41f1471d961995</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>Populate defect details</sys_name>
        <sys_overrides/>
        <sys_package display_value="Task Resolution" source="x_snc_resolution">a39f4dc2db390010ccb6df6b5e961901</sys_package>
        <sys_policy/>
        <sys_scope display_value="Task Resolution">a39f4dc2db390010ccb6df6b5e961901</sys_scope>
        <sys_update_name>sys_script_214de4e8db9e0450df41f1471d961995</sys_update_name>
        <sys_updated_by>kulshreshth.dhiman@snc</sys_updated_by>
        <sys_updated_on>2020-01-09 00:11:55</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=214de4e8db9e0450df41f1471d961995"/>
</record_update>
